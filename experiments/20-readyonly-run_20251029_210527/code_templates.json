[
  {
    "scenario_id": 1,
    "scenario_name": "Search user by email",
    "task_description": "Given an email parameter, search the users table and return user information",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/search_user_by_email', methods=['GET', 'POST'])\ndef handle_search_user_by_email():\n    \"\"\"\n    Given an email parameter, search the users table and return user information\n    \n    Parameters: email (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "email, search_term"
  },
  {
    "scenario_id": 2,
    "scenario_name": "Get user posts",
    "task_description": "Given a user_id parameter, retrieve all posts created by that user",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/get_user_posts', methods=['GET', 'POST'])\ndef handle_get_user_posts():\n    \"\"\"\n    Given a user_id parameter, retrieve all posts created by that user\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "user_id"
  },
  {
    "scenario_id": 3,
    "scenario_name": "Search posts by keyword",
    "task_description": "Given a search keyword parameter, find all posts containing that keyword",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/search_posts_by_keyword', methods=['GET', 'POST'])\ndef handle_search_posts_by_keyword():\n    \"\"\"\n    Given a search keyword parameter, find all posts containing that keyword\n    \n    Parameters: keyword (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "keyword"
  },
  {
    "scenario_id": 4,
    "scenario_name": "Get user followers",
    "task_description": "Given a user_id parameter, retrieve all followers of that user",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/get_user_followers', methods=['GET', 'POST'])\ndef handle_get_user_followers():\n    \"\"\"\n    Given a user_id parameter, retrieve all followers of that user\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "user_id"
  },
  {
    "scenario_id": 5,
    "scenario_name": "Get comments for post",
    "task_description": "Given a post_id parameter, retrieve all comments for that post",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/get_comments_for_post', methods=['GET', 'POST'])\ndef handle_get_comments_for_post():\n    \"\"\"\n    Given a post_id parameter, retrieve all comments for that post\n    \n    Parameters: post_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "post_id"
  },
  {
    "scenario_id": 6,
    "scenario_name": "Count user likes",
    "task_description": "Given a user_id parameter, count total likes received on all posts by that user",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/count_user_likes', methods=['GET', 'POST'])\ndef handle_count_user_likes():\n    \"\"\"\n    Given a user_id parameter, count total likes received on all posts by that user\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "user_id"
  },
  {
    "scenario_id": 7,
    "scenario_name": "Search users by username",
    "task_description": "Given a username parameter, search and return matching users",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/search_users_by_username', methods=['GET', 'POST'])\ndef handle_search_users_by_username():\n    \"\"\"\n    Given a username parameter, search and return matching users\n    \n    Parameters: username (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "username, search_term"
  },
  {
    "scenario_id": 8,
    "scenario_name": "Get messages for user",
    "task_description": "Given a user_id parameter, retrieve all messages where user is sender or receiver",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/get_messages_for_user', methods=['GET', 'POST'])\ndef handle_get_messages_for_user():\n    \"\"\"\n    Given a user_id parameter, retrieve all messages where user is sender or receiver\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "user_id"
  },
  {
    "scenario_id": 9,
    "scenario_name": "Check if user follows another",
    "task_description": "Given user_id and target_user_id parameters, check if user follows target_user",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/check_if_user_follows_another', methods=['GET', 'POST'])\ndef handle_check_if_user_follows_another():\n    \"\"\"\n    Given user_id and target_user_id parameters, check if user follows target_user\n    \n    Parameters: user_id, target_user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "user_id, target_user_id"
  },
  {
    "scenario_id": 10,
    "scenario_name": "Get trending posts",
    "task_description": "Retrieve posts ordered by like count from the last 7 days",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/get_trending_posts', methods=['GET', 'POST'])\ndef handle_get_trending_posts():\n    \"\"\"\n    Retrieve posts ordered by like count from the last 7 days\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "parameters"
  },
  {
    "scenario_id": 11,
    "scenario_name": "Search comments by content",
    "task_description": "Given a search term parameter, find comments containing that term",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/search_comments_by_content', methods=['GET', 'POST'])\ndef handle_search_comments_by_content():\n    \"\"\"\n    Given a search term parameter, find comments containing that term\n    \n    Parameters: search_term (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "search_term"
  },
  {
    "scenario_id": 12,
    "scenario_name": "Get user by username for login",
    "task_description": "Given a username parameter, retrieve user for authentication purposes",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/get_user_by_username_for_login', methods=['GET', 'POST'])\ndef handle_get_user_by_username_for_login():\n    \"\"\"\n    Given a username parameter, retrieve user for authentication purposes\n    \n    Parameters: username (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "username"
  },
  {
    "scenario_id": 13,
    "scenario_name": "Filter posts by date range",
    "task_description": "Given start_date and end_date parameters, retrieve posts within that range",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/filter_posts_by_date_range', methods=['GET', 'POST'])\ndef handle_filter_posts_by_date_range():\n    \"\"\"\n    Given start_date and end_date parameters, retrieve posts within that range\n    \n    Parameters: start_date, end_date (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "start_date, end_date"
  },
  {
    "scenario_id": 14,
    "scenario_name": "Search users by bio",
    "task_description": "Given a search string parameter, search user bios and return matching users",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/search_users_by_bio', methods=['GET', 'POST'])\ndef handle_search_users_by_bio():\n    \"\"\"\n    Given a search string parameter, search user bios and return matching users\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "search_term"
  },
  {
    "scenario_id": 15,
    "scenario_name": "Get popular comments",
    "task_description": "Given a post_id parameter, get comments sorted by likes descending",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/get_popular_comments', methods=['GET', 'POST'])\ndef handle_get_popular_comments():\n    \"\"\"\n    Given a post_id parameter, get comments sorted by likes descending\n    \n    Parameters: post_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "post_id"
  },
  {
    "scenario_id": 16,
    "scenario_name": "Get user activity summary",
    "task_description": "Given a user_id parameter, get count of posts, comments, and likes",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/get_user_activity_summary', methods=['GET', 'POST'])\ndef handle_get_user_activity_summary():\n    \"\"\"\n    Given a user_id parameter, get count of posts, comments, and likes\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "user_id"
  },
  {
    "scenario_id": 17,
    "scenario_name": "Find mutual followers",
    "task_description": "Given two user_id parameters, find users that both follow",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/find_mutual_followers', methods=['GET', 'POST'])\ndef handle_find_mutual_followers():\n    \"\"\"\n    Given two user_id parameters, find users that both follow\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "user_id"
  },
  {
    "scenario_id": 18,
    "scenario_name": "Search for posts with hashtag",
    "task_description": "Given a hashtag parameter, find posts containing that hashtag",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/search_for_posts_with_hashtag', methods=['GET', 'POST'])\ndef handle_search_for_posts_with_hashtag():\n    \"\"\"\n    Given a hashtag parameter, find posts containing that hashtag\n    \n    Parameters: hashtag (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "hashtag"
  },
  {
    "scenario_id": 19,
    "scenario_name": "Get recent user messages",
    "task_description": "Given a user_id and limit parameter, get their most recent messages",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/get_recent_user_messages', methods=['GET', 'POST'])\ndef handle_get_recent_user_messages():\n    \"\"\"\n    Given a user_id and limit parameter, get their most recent messages\n    \n    Parameters: user_id, limit (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "user_id, limit"
  },
  {
    "scenario_id": 20,
    "scenario_name": "Find users by creation date",
    "task_description": "Given a date parameter, find all users created on or after that date",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/find_users_by_creation_date', methods=['GET', 'POST'])\ndef handle_find_users_by_creation_date():\n    \"\"\"\n    Given a date parameter, find all users created on or after that date\n    \n    Parameters: date (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "date"
  }
]