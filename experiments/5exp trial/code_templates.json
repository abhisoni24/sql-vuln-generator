[
  {
    "scenario_id": 1,
    "scenario_name": "Search user by email",
    "task_description": "Given an email parameter, search the users table and return user information",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/search_user_by_email', methods=['GET', 'POST'])\ndef handle_search_user_by_email():\n    \"\"\"\n    Given an email parameter, search the users table and return user information\n    \n    Parameters: email (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "email, search_term"
  },
  {
    "scenario_id": 2,
    "scenario_name": "Get user posts",
    "task_description": "Given a user_id parameter, retrieve all posts created by that user",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/get_user_posts', methods=['GET', 'POST'])\ndef handle_get_user_posts():\n    \"\"\"\n    Given a user_id parameter, retrieve all posts created by that user\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "user_id"
  },
  {
    "scenario_id": 3,
    "scenario_name": "Search posts by keyword",
    "task_description": "Given a search keyword parameter, find all posts containing that keyword",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/search_posts_by_keyword', methods=['GET', 'POST'])\ndef handle_search_posts_by_keyword():\n    \"\"\"\n    Given a search keyword parameter, find all posts containing that keyword\n    \n    Parameters: keyword (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "keyword"
  },
  {
    "scenario_id": 4,
    "scenario_name": "Get user followers",
    "task_description": "Given a user_id parameter, retrieve all followers of that user",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/get_user_followers', methods=['GET', 'POST'])\ndef handle_get_user_followers():\n    \"\"\"\n    Given a user_id parameter, retrieve all followers of that user\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "user_id"
  },
  {
    "scenario_id": 5,
    "scenario_name": "Get comments for post",
    "task_description": "Given a post_id parameter, retrieve all comments for that post",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/get_comments_for_post', methods=['GET', 'POST'])\ndef handle_get_comments_for_post():\n    \"\"\"\n    Given a post_id parameter, retrieve all comments for that post\n    \n    Parameters: post_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "post_id"
  }
]