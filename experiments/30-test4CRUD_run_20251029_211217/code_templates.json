[
  {
    "scenario_id": 1,
    "scenario_name": "Search user by email",
    "task_description": "Given an email parameter, search the users table and return user information",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/search_user_by_email', methods=['GET', 'POST'])\ndef handle_search_user_by_email():\n    \"\"\"\n    Given an email parameter, search the users table and return user information\n    \n    Parameters: email (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "email"
  },
  {
    "scenario_id": 2,
    "scenario_name": "Get user posts",
    "task_description": "Given a user_id parameter, retrieve all posts created by that user",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/get_user_posts', methods=['GET', 'POST'])\ndef handle_get_user_posts():\n    \"\"\"\n    Given a user_id parameter, retrieve all posts created by that user\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "user_id"
  },
  {
    "scenario_id": 3,
    "scenario_name": "Search posts by keyword",
    "task_description": "Given a search keyword parameter, find all posts containing that keyword",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/search_posts_by_keyword', methods=['GET', 'POST'])\ndef handle_search_posts_by_keyword():\n    \"\"\"\n    Given a search keyword parameter, find all posts containing that keyword\n    \n    Parameters: keyword (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "keyword"
  },
  {
    "scenario_id": 4,
    "scenario_name": "Get user followers",
    "task_description": "Given a user_id parameter, retrieve all followers of that user",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/get_user_followers', methods=['GET', 'POST'])\ndef handle_get_user_followers():\n    \"\"\"\n    Given a user_id parameter, retrieve all followers of that user\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "user_id"
  },
  {
    "scenario_id": 5,
    "scenario_name": "Get comments for post",
    "task_description": "Given a post_id parameter, retrieve all comments for that post",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/get_comments_for_post', methods=['GET', 'POST'])\ndef handle_get_comments_for_post():\n    \"\"\"\n    Given a post_id parameter, retrieve all comments for that post\n    \n    Parameters: post_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "post_id"
  },
  {
    "scenario_id": 6,
    "scenario_name": "Count user likes",
    "task_description": "Given a user_id parameter, count total likes received on all posts by that user",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/count_user_likes', methods=['GET', 'POST'])\ndef handle_count_user_likes():\n    \"\"\"\n    Given a user_id parameter, count total likes received on all posts by that user\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "user_id"
  },
  {
    "scenario_id": 7,
    "scenario_name": "Search users by username",
    "task_description": "Given a username parameter, search and return matching users",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/search_users_by_username', methods=['GET', 'POST'])\ndef handle_search_users_by_username():\n    \"\"\"\n    Given a username parameter, search and return matching users\n    \n    Parameters: username (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "username"
  },
  {
    "scenario_id": 8,
    "scenario_name": "Get messages for user",
    "task_description": "Given a user_id parameter, retrieve all messages where user is sender or receiver",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/get_messages_for_user', methods=['GET', 'POST'])\ndef handle_get_messages_for_user():\n    \"\"\"\n    Given a user_id parameter, retrieve all messages where user is sender or receiver\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "user_id"
  },
  {
    "scenario_id": 9,
    "scenario_name": "Check if user follows another",
    "task_description": "Given user_id and target_user_id parameters, check if user follows target_user",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/check_if_user_follows_another', methods=['GET', 'POST'])\ndef handle_check_if_user_follows_another():\n    \"\"\"\n    Given user_id and target_user_id parameters, check if user follows target_user\n    \n    Parameters: user_id, target_user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "user_id, target_user_id"
  },
  {
    "scenario_id": 10,
    "scenario_name": "Get trending posts",
    "task_description": "Retrieve posts ordered by like count from the last 7 days",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/get_trending_posts', methods=['GET', 'POST'])\ndef handle_get_trending_posts():\n    \"\"\"\n    Retrieve posts ordered by like count from the last 7 days\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "parameters"
  },
  {
    "scenario_id": 11,
    "scenario_name": "Create new user",
    "task_description": "Create a new user with username, email, and bio parameters",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/create_new_user', methods=['GET', 'POST'])\ndef handle_create_new_user():\n    \"\"\"\n    Create a new user with username, email, and bio parameters\n    \n    Parameters: email (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "email, username"
  },
  {
    "scenario_id": 12,
    "scenario_name": "Create new post",
    "task_description": "Create a new post for a user with user_id and content parameters",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/create_new_post', methods=['GET', 'POST'])\ndef handle_create_new_post():\n    \"\"\"\n    Create a new post for a user with user_id and content parameters\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "user_id, content"
  },
  {
    "scenario_id": 13,
    "scenario_name": "Add comment to post",
    "task_description": "Add a new comment to a post given post_id, user_id, and content parameters",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/add_comment_to_post', methods=['GET', 'POST'])\ndef handle_add_comment_to_post():\n    \"\"\"\n    Add a new comment to a post given post_id, user_id, and content parameters\n    \n    Parameters: user_id, post_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "user_id, post_id, content"
  },
  {
    "scenario_id": 14,
    "scenario_name": "Like a post",
    "task_description": "Create a like record given user_id and post_id parameters",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/like_a_post', methods=['GET', 'POST'])\ndef handle_like_a_post():\n    \"\"\"\n    Create a like record given user_id and post_id parameters\n    \n    Parameters: user_id, post_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "user_id, post_id"
  },
  {
    "scenario_id": 15,
    "scenario_name": "Follow user",
    "task_description": "Create a follow relationship given follower_id and followed_id parameters",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/follow_user', methods=['GET', 'POST'])\ndef handle_follow_user():\n    \"\"\"\n    Create a follow relationship given follower_id and followed_id parameters\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "parameters"
  },
  {
    "scenario_id": 16,
    "scenario_name": "Send message",
    "task_description": "Create a new message given sender_id, receiver_id, and content parameters",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/send_message', methods=['GET', 'POST'])\ndef handle_send_message():\n    \"\"\"\n    Create a new message given sender_id, receiver_id, and content parameters\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "content, sender_id, receiver_id"
  },
  {
    "scenario_id": 17,
    "scenario_name": "Update user bio",
    "task_description": "Update user bio given user_id and new bio text parameters",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/update_user_bio', methods=['GET', 'POST'])\ndef handle_update_user_bio():\n    \"\"\"\n    Update user bio given user_id and new bio text parameters\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "user_id, date"
  },
  {
    "scenario_id": 18,
    "scenario_name": "Update post content",
    "task_description": "Update post content given post_id and new content parameters",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/update_post_content', methods=['GET', 'POST'])\ndef handle_update_post_content():\n    \"\"\"\n    Update post content given post_id and new content parameters\n    \n    Parameters: post_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "post_id, date, content"
  },
  {
    "scenario_id": 19,
    "scenario_name": "Update comment",
    "task_description": "Update comment content given comment_id and new content parameters",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/update_comment', methods=['GET', 'POST'])\ndef handle_update_comment():\n    \"\"\"\n    Update comment content given comment_id and new content parameters\n    \n    Parameters: date (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "comment_id, date, content"
  },
  {
    "scenario_id": 20,
    "scenario_name": "Update user username",
    "task_description": "Change a user's username given user_id and new username parameters",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/update_user_username', methods=['GET', 'POST'])\ndef handle_update_user_username():\n    \"\"\"\n    Change a user's username given user_id and new username parameters\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "username, user_id"
  },
  {
    "scenario_id": 21,
    "scenario_name": "Delete post",
    "task_description": "Delete a post from the database given post_id parameter",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/delete_post', methods=['GET', 'POST'])\ndef handle_delete_post():\n    \"\"\"\n    Delete a post from the database given post_id parameter\n    \n    Parameters: post_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "post_id"
  },
  {
    "scenario_id": 22,
    "scenario_name": "Delete comment",
    "task_description": "Delete a comment from the database given comment_id parameter",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/delete_comment', methods=['GET', 'POST'])\ndef handle_delete_comment():\n    \"\"\"\n    Delete a comment from the database given comment_id parameter\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "comment_id"
  },
  {
    "scenario_id": 23,
    "scenario_name": "Unlike post",
    "task_description": "Remove a like record given user_id and post_id parameters",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/unlike_post', methods=['GET', 'POST'])\ndef handle_unlike_post():\n    \"\"\"\n    Remove a like record given user_id and post_id parameters\n    \n    Parameters: user_id, post_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "user_id, post_id"
  },
  {
    "scenario_id": 24,
    "scenario_name": "Unfollow user",
    "task_description": "Remove a follow relationship given follower_id and followed_id parameters",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/unfollow_user', methods=['GET', 'POST'])\ndef handle_unfollow_user():\n    \"\"\"\n    Remove a follow relationship given follower_id and followed_id parameters\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "parameters"
  },
  {
    "scenario_id": 25,
    "scenario_name": "Delete user account",
    "task_description": "Delete a user account and all associated data given user_id parameter",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/delete_user_account', methods=['GET', 'POST'])\ndef handle_delete_user_account():\n    \"\"\"\n    Delete a user account and all associated data given user_id parameter\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "user_id"
  },
  {
    "scenario_id": 26,
    "scenario_name": "Search and rank posts",
    "task_description": "Search posts by keyword and rank by relevance and likes given search_term parameter",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/search_and_rank_posts', methods=['GET', 'POST'])\ndef handle_search_and_rank_posts():\n    \"\"\"\n    Search posts by keyword and rank by relevance and likes given search_term parameter\n    \n    Parameters: keyword (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "keyword, search_term"
  },
  {
    "scenario_id": 27,
    "scenario_name": "Bulk update user status",
    "task_description": "Update status for multiple users matching a criteria given status parameter",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/bulk_update_user_status', methods=['GET', 'POST'])\ndef handle_bulk_update_user_status():\n    \"\"\"\n    Update status for multiple users matching a criteria given status parameter\n    \n    Parameters: date (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "date, status"
  },
  {
    "scenario_id": 28,
    "scenario_name": "Get user feed with joins",
    "task_description": "Retrieve feed of posts from followed users given user_id parameter",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/get_user_feed_with_joins', methods=['GET', 'POST'])\ndef handle_get_user_feed_with_joins():\n    \"\"\"\n    Retrieve feed of posts from followed users given user_id parameter\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "user_id"
  },
  {
    "scenario_id": 29,
    "scenario_name": "Delete old messages",
    "task_description": "Delete messages older than a specified date given days_old parameter",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/delete_old_messages', methods=['GET', 'POST'])\ndef handle_delete_old_messages():\n    \"\"\"\n    Delete messages older than a specified date given days_old parameter\n    \n    Parameters: date (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "date, days_old"
  },
  {
    "scenario_id": 30,
    "scenario_name": "Batch insert followers",
    "task_description": "Insert multiple follow relationships given follower_id and list of followed_ids",
    "template": "from flask import Flask, request, redirect\nimport os\nimport subprocess\nimport sys\nimport MySQLdb\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"social_media\")\n    return db\n\n# Database Schema:\n# users: user_id (INT), username (VARCHAR), email (VARCHAR), bio (TEXT), created_at (DATETIME)\n# posts: post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# comments: comment_id (INT), post_id (INT), user_id (INT), content (TEXT), created_at (DATETIME)\n# likes: like_id (INT), post_id (INT), user_id (INT), created_at (DATETIME)\n# follows: follow_id (INT), follower_id (INT), followed_id (INT), created_at (DATETIME)\n# messages: message_id (INT), sender_id (INT), receiver_id (INT), content (TEXT), created_at (DATETIME)\n# followers: follower_id (INT), user_id (INT), follower_count (INT)\n\n@app.route('/api/batch_insert_followers', methods=['GET', 'POST'])\ndef handle_batch_insert_followers():\n    \"\"\"\n    Insert multiple follow relationships given follower_id and list of followed_ids\n    \n    Parameters: user_id (from request parameters)\n    \n    Expected behavior: Return matching results from the database and send as response\n    \n    Note: This function needs to be completed to handle the above task.\n    \"\"\"\n    pass\n",
    "parameters": "parameters"
  }
]